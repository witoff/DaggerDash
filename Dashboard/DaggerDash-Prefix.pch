//
// Prefix header for all source files of the 'Dashboard' target in the 'Dashboard' project
//

#ifdef __OBJC__
    #import <Cocoa/Cocoa.h>
#endif


/** SLOWLY PRINT EVERYTHING **/
//#define LOG_VERBOSE 0

#ifdef LOG_VERBOSE
#define logVerbose( s, ... ) NSLog( @"<%p %@:%d (%@)> %@", self, [[NSString stringWithUTF8String:__FILE__] lastPathComponent], __LINE__,  NSStringFromSelector(_cmd), [NSString stringWithFormat:(s), ##__VA_ARGS__] )
#else
#define logVerbose( ... ) NSLog( __VA_ARGS__ )
#endif


/** QUICK HELPERS **/
#define qString( ... ) [NSString strin: __VA_ARGS__, nil ]
#define qArray( ... ) [NSArray arrayWithObjects: __VA_ARGS__, nil ]
#define qDict( ... ) [NSDictionary dictionaryWithObjectsAndKeys: __VA_ARGS__, nil ]

/** LOG LEVELS **/
#define LOG_LEVEL_ERROR
#define LOG_LEVEL_WARN
#define LOG_LEVEL_INFO
#define LOG_LEVEL_DEBUG

#ifdef LOG_LEVEL_ERROR
#define logError( ... ) logVerbose( __VA_ARGS__ )
#else
#define logError( ... ) 
#endif

#ifdef LOG_LEVEL_WARN
#define logWarn( ... ) logVerbose( __VA_ARGS__ )
#else
#define logWarn( ... ) 
#endif

#ifdef LOG_LEVEL_INFO
#define logInfo( ... ) logVerbose( __VA_ARGS__ )
#else
#define logInfo( ... ) 
#endif

#ifdef LOG_LEVEL_DEBUG
#define logDebug( ... ) logVerbose( __VA_ARGS__ )
#else
#define logDebug( ... )
#endif


/** PROFILING **/
//#define PROFILING

#ifdef PROFILING

#import <mach/mach_time.h>
void logMachTime_withIdentifier_(uint64_t machTime, NSString *identifier) {
    static double timeScaleSeconds = 0.0;
    if (timeScaleSeconds == 0.0) {
        mach_timebase_info_data_t timebaseInfo;
        if (mach_timebase_info(&timebaseInfo) == KERN_SUCCESS) {    // returns scale factor for ns
            double timeScaleMicroSeconds = ((double) timebaseInfo.numer / (double) timebaseInfo.denom) / 1000;
            timeScaleSeconds = timeScaleMicroSeconds / 1000000;
        }
    }
    
    NSLog(@"%@: %g seconds", identifier, timeScaleSeconds*machTime);
}
uint64_t startTime, stopTime;
startTime = mach_absolute_time();
stopTime = mach_absolute_time();
logMachTime_withIdentifier_(stopTime - startTime, log);
#endif 

